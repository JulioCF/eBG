//=====================================================
// ExtendedBG Script Commands
//=====================================================
// By:
// 	Dastgir
//=====================================================
// Date:
// 	11th November 2018
//=====================================================

*pc_block_si(<Type>, <Value>{, <AccountID>})

This Commands blocks the usage of Items/Skills from 
the Attached user.

Types:
	PC_BLOCK_MOVE: Move is Blocked.
	PC_BLOCK_ALL: Skills/Items is blocked.

Value:
	0: Disable
	1: Enable

=====================================================

*bg_hpsp_time(<HP>, <SP>, <Time>{, <BGTeam>})

Adds a Timer to the Attached player, which will reduce
the percentage of HP/SP or both in the Time mentioned.
Time is in milliseconds.

Adds a Player to BGTeam if specified.

Automatically Shows e_hlp emotion/viewpoint of player,
and EF_BOWLINGBASH effect on player.

=====================================================

*bg_hpsp_time_del(<Type>)

This Command deletes the HP/SP reduce timer from the
attached player.

Types:
	EBG_HP_TIME: HP Timer
	EBG_SP_TIME: SP Timer
	EBG_EXTRA_TIME: Free Timers (extra)

Note: Types are operated bitwise.

=====================================================

*bg_hpsp_time_extra(<effectID>, <EmotionID>, <PointID>, <Color>)

Adds effectID,emotionID,pointID and Color to Extra variable of
player struct, useful in bg_npc_cond_hpsp to show custom effects
and all other things.

=====================================================

*viewpointmap("<mapname>", <Type>, <x>, <y>, <id>, <color>)

It does exactly the same thing as viewpoint, except
that, it shows to all players in the map.

=====================================================

*bg_reward(<bg_id>, <item_id>, <amount>, <kafra_points>, <quest_id>, "<variable>", <add_value>, <bg_a_type>, <bg_win_loss>)

This gives item to the specified BattlegroundTeam.

item_id: 
	ID of the item to give
amount: 
	Amount of item_id to give.
kafra_points: 
	amount of kafra_points to give.
quest_id: 
	Quest_ID that is to be added to player.
"variable": 
	Variable Name.
add_value:
	Adding add_value to VariableName.
bg_a_type:
	Type of Match(struct Battleground_Types)
bg_win_loss:
	Won/Loss or Tie?(0=Won/1=Tie/2=Loss)

=====================================================

*bg_addfame({<account_id>})

Adds 1 BGFame to attached rid, or to the specified ID.

=====================================================

*bg_addpoints(<type>, <value>, <fame>{, <accouont_id>})

Adds <fame> Fame and <value> to specified <type>.

Type:
	Refer point_types.txt

=====================================================

*map_exists("<MapName>")

Returns the ID of the map.

=====================================================

*bg_change_team(<teamID>, <GuildID>)

Changes the BGTeam of Player to TeamID and Guild as GuildID

=====================================================

*bg_e_join_team(<TeamID>, <GuildID>)

Makes the Player join to BGTeam with Specified GuildID.

=====================================================

*bg_end(<bg_type>)

Ends the specified type of BG. Also saves the Data of BG

bg_types:
	BGT_CTF
	BGT_BOSS
	BGT_TI
	BGT_EOS
	BGT_TD
	BGT_SC
	BGT_CONQ
	BGT_RUSH
	BGT_DOM

=====================================================

*bg_reset_rank_stat()

Resets the Total Ranked Games Played to 0.
Returns 1 on success, else 0

=====================================================

*on_ebg()

Returns 1 if the player is playing on eBG.

=====================================================

*bg_logincheck("<map_name>")

Returns the count of player with sameIP on the specified
map.

=====================================================

*bg_mapwarp("<map_name>")

Warps all players from Map to their respective save points.

=====================================================

*bg_immunemob(<ID>, <activate>)

Makes the monster type as plant.

activate:
	1: Enable
	0: Disable

=====================================================

*bg_mob_move(<ID>, <activate>)

Changed the monster move ability

activate:
	EBG_MOVABLE: Can move
	EBG_IMMOVABLE: Cannot move

=====================================================

*bg_revealmob(<ID>, <flag>, <color>)

Refer to viewpoint.
ID: Monster RID

=====================================================

*bg_timer_start(<duration>, <interval>{, <RandTimer1>, <RandTimer2>})

Starts a Timer for specified duration(in ms),
Its repeated if interval is 1.

SELF_DELETE is imposed if interval is 0.

if RandTimer1 and RandTimer2 is specified, the timer will neglect duration,
and start every RandTimer1-RandTimer2 Seconds

FORCE_DELETE is imposed if RandTimer is specified

Returns Timer Unique ID.

=====================================================

*bg_areaheal_timer(<UID>, "<map_name>", <x1>, <y1>, <x2>, <y2>, <hp>, <sp>{, <add_op>})

Refer to areaheal.
UID:
	Timer UID, to which you want to add areaheal.
add_op:
	1 if you don't want to add operation.

=====================================================

*bg_areawarp_timer(<UID>, "<map_name>", <x1>, <y1>, <x2>, <y2>, <"str">, <x3>, <y3>{, <x4>, <y4>{, <add_op>}})
*bg_areawarp_timer(<UID>, "<map_name>", <x1>, <y1>, <x2>, <y2>, <"str">, <x3>, <y3>{, <add_op>})

Refer to areawarp.

UID: 
	Timer UID, to which you want to add areaheal.
add_op:
	1 if you don't want to add operation.

=====================================================

*bg_effect_timer(<UID>, <EffectID>{, <index>{, <add_op>}})

This command, if run from an NPC object that has a sprite, will call up a
specified effect number, centered on the NPC sprite. If the running code
does not have an object ID (a 'floating' NPC) or is not running from an
NPC object at all (an item script) the effect will be centered on the
character who's RID got attached to the script, if any. For usable item
scripts, this command will create an effect centered on the player using
the item.

index:
	Maximum BMAX_EFFECT can be shown.
	so one can have multiple effects when specified with different index.

UID:
	Timer UID, to which you want to add areaheal.

add_op:
	1 if you don't want to add operation.

=====================================================

*bg_viewpoint_timer(<UID>, "<map_name>", <type>, <x>, <y>, <id>, <color>{, <add_op>})

Refer to viewpointmap

ID:
	if >= 900, it will check the value of bg_get_npc_data(<id>-900) and use that id.

UID:
	Timer UID, to which you want to add areaheal.
add_op:
	1 if you don't want to add operation.

=====================================================

*bg_npc_cond_hpsp("<npc_name>", <value>, <condition>,{ <index>{, <index_at>}})

Same as bg_npc_cond_timer, but the data is saved to player instead of npc.
Executes bg_hpsp_time if condition is met.

=====================================================

*bg_player_cond_timer(<UID>, "<npc_name>", <value>, <condition>, <operation>{, <index>{, <index_at>{, <add_op>}}})
	
Same as bg_npc_cond_timer, but the data is variable value from Player instead of npc.

=====================================================

*bg_npc_cond_timer(<UID>, "<npc_name>", <value>, <condition>, <operation>{, <index>{, <index_at>{, <add_op>}}})

Checks a Condition before executing a specific operation.
if value satisfies the condition, then execute operation (value referred from bg_npc_data)

value have maximum BEXTRA_MAX_VALUE index to check

index_at: Check the value at [index_at]

index: Index condition, Maximum BNPC_MAX_CONDITION

UID:
	Timer UID, to which you want to add areaheal.
npc_name:
	Name of npc which will execute the operation
condition(bitwise operation):
	EBG_CONDITION_LESS(1): Less than Value
	EBG_CONDITION_EQUAL(2): Equal to Value
	EBG_CONDITION_GREATER(4): Greater than Value
	EBG_CONDITION_ELSE(8): Execute if nothing satisfies
operation:
	see 'doc/operations_doc.txt'
add_op:
	1 if you don't want to add operation.

=====================================================

*bg_timer_child(<UID>, <Duration>, <Operations>)

Adds a Child Timer to timer of UID, with duration and
operations specified.

It prevents addition of 2nd timer to do some work with 
almost near timings.

=====================================================

*bg_operations_timer(<UID>, <Operations>{, <replace>})

Adds Operation to timer with speicified UID.

replace:
	Overwrites the operation with mentioned.
	if not given, operation is added to current operation list.

=====================================================

*bg_timer_stop(<UID>)

Ends the Timer with specified UID, and destroys it's data.

=====================================================

*bg_timer_exists(<UID>)

Checks if Timer with UID Exists or not.
If Timer exists, it returns 1, else it returns 0

=====================================================

*bg_npc_data(<value>{, <index>{, "<npc_name>"}})

Sets Value of npc_extra_data to specified index.

index:
	if not given, index is 0.
	Maximum Index: BNPC_MAX_CONDITION

npc_name:
	if not given, current npc saves the data.

=====================================================

*bg_get_npc_data({<index>{, "<npc_name>"}})

Gets value of npc_extra_data at index.

index:
	if not given, index is 0.
	Maximum Index: BNPC_MAX_CONDITION

npc_name:
	if not given, Data from current npc is received.

=====================================================

*bg_areaitem("<map_name>", <x>, <y>, <ItemID>, <amount>)

Drops ItemID in area of x^(1/2)+rand(2), y^(1/2)+rand(2)
Item is dropped 1 by 1, and randomly in the area.

=====================================================

*bg_team_reveal(<TeamID>)

Shows the Team Location on MiniMap
Returns 1 on success

=====================================================

*bg_team_score(<TeamID>, <Points>)

Updates the Team Points to specified one.
(bg_extra_info => points)

Returns 1 on Success

=====================================================

*bg_insert_npc_name(<UID>, "<npc_name>")

Inserts the NPC Name to the given UID, to add npc name to the structure, so that one can use
functions like ConditionTimer and all other which requires NPC.

=====================================================

*bg_insert_event_name(<UID>, "<event_name>")

Inserts the NPC Name to the given UID, to add EventName to the structure, so that one can use
functions like BG_T_O_DOEVENT and all other which requires Events.

This command Requires NPCName to be inserted

Example:

-	script	NpcN	FAKE_NPC,{
OnEvent:
	// do something
	end;
OnInit:
	.uid = bg_timer_start(2000, 1);               /// Starts Timer with 2 Second Interval
	bg_insert_npc_name(.uid, strnpcinfo(3));      /// Add NPC Name
	bg_insert_event_name(.uid, "OnEvent");        /// Add Event Name
	bg_operations_timer(.uid, EBG_OP_DOEVENT, 1); /// Set Timer Operation to DoEvent
	end;
}
	
Following program will execute OnEvent every 2 seconds, until the timer is stopped.

=====================================================

*bg_perform_arithmetic(<UID>, "<npc_name>", <value>, <operation>{, <index_at>{, <add_op>}})

Performs Arithmetic Operations on Variables set via bg_npc_data.
 
Value:
	Value to be added/substracted/zeroed/divided/multiplied/etc..

Operation:
	E_BG_A_ADD			-	(0)		// Adds by Value
	E_BG_A_SUBSTRACT	-	(1)		// Substracts by Value
	E_BG_A_MULTIPLY		-	(2)		// Multiplies by Value
	E_BG_A_DIVIDE		-	(3)		// Divides by Value
	E_BG_A_ZEROED		-	(4)		// Change the NPC Data to 0
	
index_at:
	Default '0', else performs at the given index.(MAX: BEXTRA_MAX_VALUE)

add_op:
	1 if you don't want to add Timer operation.

=====================================================

*bg_mapannounce_timer(<UID>, "<map_name>", "<mes>", <flag>, "<color>"{, <announce>{, <add_op>}})

Refer to mapannounce

announce:
	1 = Announce only if players have warped.(Default)
	0 = Announce everytime even if no players are warped.
UID:
	Timer UID, to which you want to add mapannounce.
add_op:
	1 if you don't want to add operation.

=====================================================

*bg_info(<bg_id>, <type>)

Returns Specific Data based on types.

Types:
	0: Returns BG Guild Name, "null" is invalid data is provided
	1: Returns BG Guild Master Name, "null" is invalid data is provided
	2: Returns Color associated to BG Guild, 0 is invalid data is provided

=====================================================

*bg_timer_link(<UID>, <OperationIndependent>, <OperationDependent>)

This will link OperationDependent Operations to the OperationIndependent Operations.
i.e OperationDependent will only be able to run after OperationIndependent have run with success(having some return values)

=====================================================

*bg_announce("<text>", <flag>, <fontColor>{, <fontType>{, <fontSize>{, <fontAlign>{, <fontY>}}}})

Refer to announce

flag:
	1: All Clients (will not be shown to players with ignorebg)
	2: eBG Clients (Same Team Members on eBG)

=====================================================

*bg_script_timer(<UID>, "Script"{, <AddOp>})

Adds Script to be executed by NPC for given UID.
AddOp: 1: Don't Add BG_T_O_SCRIPT (Should be set by child timer)

=====================================================

*checkwall(<"wall_name">)

Checks if wall with "wall_name" exists.
Returns 1 if wall exists, else returns 0

=====================================================

*getebgitem(<nameid>, <quantity>, <type>)

Refer to getitem

type:
	MAP_IS_BG: BG Bounded Item
	MAP_IS_WOE: WoE Bounded Item

=====================================================

*getbgfame(fameType, top)

Returns the top <top> Fame in descending order for the <fameType>

fameType:
  1 = Ranked BG
  2 = Regular BG

Saves the character ID in array $@bg_fame_id.
This command returns the number of values saved in the array.

=====================================================
